/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Choice } from "./Choice";
import { ChoiceCountArgs } from "./ChoiceCountArgs";
import { ChoiceFindManyArgs } from "./ChoiceFindManyArgs";
import { ChoiceFindUniqueArgs } from "./ChoiceFindUniqueArgs";
import { CreateChoiceArgs } from "./CreateChoiceArgs";
import { UpdateChoiceArgs } from "./UpdateChoiceArgs";
import { DeleteChoiceArgs } from "./DeleteChoiceArgs";
import { Scene } from "../../scene/base/Scene";
import { ChoiceService } from "../choice.service";
@graphql.Resolver(() => Choice)
export class ChoiceResolverBase {
  constructor(protected readonly service: ChoiceService) {}

  async _choicesMeta(
    @graphql.Args() args: ChoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Choice])
  async choices(@graphql.Args() args: ChoiceFindManyArgs): Promise<Choice[]> {
    return this.service.choices(args);
  }

  @graphql.Query(() => Choice, { nullable: true })
  async choice(
    @graphql.Args() args: ChoiceFindUniqueArgs
  ): Promise<Choice | null> {
    const result = await this.service.choice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Choice)
  async createChoice(@graphql.Args() args: CreateChoiceArgs): Promise<Choice> {
    return await this.service.createChoice({
      ...args,
      data: {
        ...args.data,

        scene: args.data.scene
          ? {
              connect: args.data.scene,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Choice)
  async updateChoice(
    @graphql.Args() args: UpdateChoiceArgs
  ): Promise<Choice | null> {
    try {
      return await this.service.updateChoice({
        ...args,
        data: {
          ...args.data,

          scene: args.data.scene
            ? {
                connect: args.data.scene,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Choice)
  async deleteChoice(
    @graphql.Args() args: DeleteChoiceArgs
  ): Promise<Choice | null> {
    try {
      return await this.service.deleteChoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Scene, {
    nullable: true,
    name: "scene",
  })
  async getScene(@graphql.Parent() parent: Choice): Promise<Scene | null> {
    const result = await this.service.getScene(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
