/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SceneService } from "../scene.service";
import { SceneCreateInput } from "./SceneCreateInput";
import { Scene } from "./Scene";
import { SceneFindManyArgs } from "./SceneFindManyArgs";
import { SceneWhereUniqueInput } from "./SceneWhereUniqueInput";
import { SceneUpdateInput } from "./SceneUpdateInput";
import { ChoiceFindManyArgs } from "../../choice/base/ChoiceFindManyArgs";
import { Choice } from "../../choice/base/Choice";
import { ChoiceWhereUniqueInput } from "../../choice/base/ChoiceWhereUniqueInput";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ProgressWhereUniqueInput } from "../../progress/base/ProgressWhereUniqueInput";
import { TimerFindManyArgs } from "../../timer/base/TimerFindManyArgs";
import { Timer } from "../../timer/base/Timer";
import { TimerWhereUniqueInput } from "../../timer/base/TimerWhereUniqueInput";

export class SceneControllerBase {
  constructor(protected readonly service: SceneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scene })
  async createScene(@common.Body() data: SceneCreateInput): Promise<Scene> {
    return await this.service.createScene({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        isCheckpoint: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scene] })
  @ApiNestedQuery(SceneFindManyArgs)
  async scenes(@common.Req() request: Request): Promise<Scene[]> {
    const args = plainToClass(SceneFindManyArgs, request.query);
    return this.service.scenes({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        isCheckpoint: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scene(
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Scene | null> {
    const result = await this.service.scene({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        isCheckpoint: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScene(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() data: SceneUpdateInput
  ): Promise<Scene | null> {
    try {
      return await this.service.updateScene({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          isCheckpoint: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scene })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScene(
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Scene | null> {
    try {
      return await this.service.deleteScene({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          isCheckpoint: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/choices")
  @ApiNestedQuery(ChoiceFindManyArgs)
  async findChoices(
    @common.Req() request: Request,
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Choice[]> {
    const query = plainToClass(ChoiceFindManyArgs, request.query);
    const results = await this.service.findChoices(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        nextScene: true,

        scene: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/choices")
  async connectChoices(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ChoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      choices: {
        connect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/choices")
  async updateChoices(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ChoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      choices: {
        set: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/choices")
  async disconnectChoices(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ChoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      choices: {
        disconnect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/progresses")
  @ApiNestedQuery(ProgressFindManyArgs)
  async findProgresses(
    @common.Req() request: Request,
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Progress[]> {
    const query = plainToClass(ProgressFindManyArgs, request.query);
    const results = await this.service.findProgresses(params.id, {
      ...query,
      select: {
        createdAt: true,
        currentScene: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        scene: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/progresses")
  async connectProgresses(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        connect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/progresses")
  async updateProgresses(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        set: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/progresses")
  async disconnectProgresses(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        disconnect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/timers")
  @ApiNestedQuery(TimerFindManyArgs)
  async findTimers(
    @common.Req() request: Request,
    @common.Param() params: SceneWhereUniqueInput
  ): Promise<Timer[]> {
    const query = plainToClass(TimerFindManyArgs, request.query);
    const results = await this.service.findTimers(params.id, {
      ...query,
      select: {
        createdAt: true,
        delay: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        scene: {
          select: {
            id: true,
          },
        },

        targetScene: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/timers")
  async connectTimers(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: TimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timers: {
        connect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/timers")
  async updateTimers(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: TimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timers: {
        set: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/timers")
  async disconnectTimers(
    @common.Param() params: SceneWhereUniqueInput,
    @common.Body() body: TimerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      timers: {
        disconnect: body,
      },
    };
    await this.service.updateScene({
      where: params,
      data,
      select: { id: true },
    });
  }
}
