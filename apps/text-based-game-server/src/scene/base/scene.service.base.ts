/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Scene as PrismaScene,
  Choice as PrismaChoice,
  Progress as PrismaProgress,
  Timer as PrismaTimer,
} from "@prisma/client";

export class SceneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SceneCountArgs, "select">): Promise<number> {
    return this.prisma.scene.count(args);
  }

  async scenes<T extends Prisma.SceneFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SceneFindManyArgs>
  ): Promise<PrismaScene[]> {
    return this.prisma.scene.findMany<Prisma.SceneFindManyArgs>(args);
  }
  async scene<T extends Prisma.SceneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SceneFindUniqueArgs>
  ): Promise<PrismaScene | null> {
    return this.prisma.scene.findUnique(args);
  }
  async createScene<T extends Prisma.SceneCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SceneCreateArgs>
  ): Promise<PrismaScene> {
    return this.prisma.scene.create<T>(args);
  }
  async updateScene<T extends Prisma.SceneUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SceneUpdateArgs>
  ): Promise<PrismaScene> {
    return this.prisma.scene.update<T>(args);
  }
  async deleteScene<T extends Prisma.SceneDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SceneDeleteArgs>
  ): Promise<PrismaScene> {
    return this.prisma.scene.delete(args);
  }

  async findChoices(
    parentId: string,
    args: Prisma.ChoiceFindManyArgs
  ): Promise<PrismaChoice[]> {
    return this.prisma.scene
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .choices(args);
  }

  async findProgresses(
    parentId: string,
    args: Prisma.ProgressFindManyArgs
  ): Promise<PrismaProgress[]> {
    return this.prisma.scene
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .progresses(args);
  }

  async findTimers(
    parentId: string,
    args: Prisma.TimerFindManyArgs
  ): Promise<PrismaTimer[]> {
    return this.prisma.scene
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timers(args);
  }
}
