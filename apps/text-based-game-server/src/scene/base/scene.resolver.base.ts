/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scene } from "./Scene";
import { SceneCountArgs } from "./SceneCountArgs";
import { SceneFindManyArgs } from "./SceneFindManyArgs";
import { SceneFindUniqueArgs } from "./SceneFindUniqueArgs";
import { CreateSceneArgs } from "./CreateSceneArgs";
import { UpdateSceneArgs } from "./UpdateSceneArgs";
import { DeleteSceneArgs } from "./DeleteSceneArgs";
import { ChoiceFindManyArgs } from "../../choice/base/ChoiceFindManyArgs";
import { Choice } from "../../choice/base/Choice";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { TimerFindManyArgs } from "../../timer/base/TimerFindManyArgs";
import { Timer } from "../../timer/base/Timer";
import { SceneService } from "../scene.service";
@graphql.Resolver(() => Scene)
export class SceneResolverBase {
  constructor(protected readonly service: SceneService) {}

  async _scenesMeta(
    @graphql.Args() args: SceneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scene])
  async scenes(@graphql.Args() args: SceneFindManyArgs): Promise<Scene[]> {
    return this.service.scenes(args);
  }

  @graphql.Query(() => Scene, { nullable: true })
  async scene(
    @graphql.Args() args: SceneFindUniqueArgs
  ): Promise<Scene | null> {
    const result = await this.service.scene(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scene)
  async createScene(@graphql.Args() args: CreateSceneArgs): Promise<Scene> {
    return await this.service.createScene({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Scene)
  async updateScene(
    @graphql.Args() args: UpdateSceneArgs
  ): Promise<Scene | null> {
    try {
      return await this.service.updateScene({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Scene)
  async deleteScene(
    @graphql.Args() args: DeleteSceneArgs
  ): Promise<Scene | null> {
    try {
      return await this.service.deleteScene(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Choice], { name: "choices" })
  async findChoices(
    @graphql.Parent() parent: Scene,
    @graphql.Args() args: ChoiceFindManyArgs
  ): Promise<Choice[]> {
    const results = await this.service.findChoices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Progress], { name: "progresses" })
  async findProgresses(
    @graphql.Parent() parent: Scene,
    @graphql.Args() args: ProgressFindManyArgs
  ): Promise<Progress[]> {
    const results = await this.service.findProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Timer], { name: "timers" })
  async findTimers(
    @graphql.Parent() parent: Scene,
    @graphql.Args() args: TimerFindManyArgs
  ): Promise<Timer[]> {
    const results = await this.service.findTimers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
