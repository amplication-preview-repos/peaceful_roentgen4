/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TimerService } from "../timer.service";
import { TimerCreateInput } from "./TimerCreateInput";
import { Timer } from "./Timer";
import { TimerFindManyArgs } from "./TimerFindManyArgs";
import { TimerWhereUniqueInput } from "./TimerWhereUniqueInput";
import { TimerUpdateInput } from "./TimerUpdateInput";

export class TimerControllerBase {
  constructor(protected readonly service: TimerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Timer })
  async createTimer(@common.Body() data: TimerCreateInput): Promise<Timer> {
    return await this.service.createTimer({
      data: {
        ...data,

        game: data.game
          ? {
              connect: data.game,
            }
          : undefined,

        scene: data.scene
          ? {
              connect: data.scene,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        delay: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        scene: {
          select: {
            id: true,
          },
        },

        targetScene: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Timer] })
  @ApiNestedQuery(TimerFindManyArgs)
  async timers(@common.Req() request: Request): Promise<Timer[]> {
    const args = plainToClass(TimerFindManyArgs, request.query);
    return this.service.timers({
      ...args,
      select: {
        createdAt: true,
        delay: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        scene: {
          select: {
            id: true,
          },
        },

        targetScene: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Timer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async timer(
    @common.Param() params: TimerWhereUniqueInput
  ): Promise<Timer | null> {
    const result = await this.service.timer({
      where: params,
      select: {
        createdAt: true,
        delay: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,

        scene: {
          select: {
            id: true,
          },
        },

        targetScene: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Timer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTimer(
    @common.Param() params: TimerWhereUniqueInput,
    @common.Body() data: TimerUpdateInput
  ): Promise<Timer | null> {
    try {
      return await this.service.updateTimer({
        where: params,
        data: {
          ...data,

          game: data.game
            ? {
                connect: data.game,
              }
            : undefined,

          scene: data.scene
            ? {
                connect: data.scene,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          delay: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,

          scene: {
            select: {
              id: true,
            },
          },

          targetScene: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Timer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTimer(
    @common.Param() params: TimerWhereUniqueInput
  ): Promise<Timer | null> {
    try {
      return await this.service.deleteTimer({
        where: params,
        select: {
          createdAt: true,
          delay: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,

          scene: {
            select: {
              id: true,
            },
          },

          targetScene: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
